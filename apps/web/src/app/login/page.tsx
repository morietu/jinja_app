"use client";
import api from "@/lib/api/client";
import { useState } from "react";
import { login as loginApi } from "@/lib/api/auth";
import { useRouter } from "next/navigation";
import { useAuth } from "@/lib/hooks/useAuth";
import { AxiosError } from "axios";

export default function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { login } = useAuth();

  const handleLogin = async () => {
    if (!username || !password) {
      setError("„É¶„Éº„Ç∂„ÉºÂêç„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      console.log("„É≠„Ç∞„Ç§„É≥Ë©¶Ë°å‰∏≠...", { username });

      const response = await loginApi(username, password);
      console.log("„É≠„Ç∞„Ç§„É≥API„É¨„Çπ„Éù„É≥„Çπ:", response);

      // üéØ „Éà„Éº„ÇØ„É≥‰øùÂ≠òÔºàinterceptor „ÅåÊãæ„Åà„Çã„Çà„ÅÜ„Å´Ôºâ
      localStorage.setItem("access_token", response.access);
      localStorage.setItem("refresh_token", response.refresh);

      // „É≠„Ç∞„Ç§„É≥ÊàêÂäüÂæå„ÄÅ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
      try {
        const userResponse = await api.get("/users/me/");
        const userData = userResponse.data;

        console.log("„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø:", userData);
        login(userData);

        alert("„É≠„Ç∞„Ç§„É≥ÊàêÂäüÔºÅ");
        router.push("/mypage");
      } catch (error: unknown) {
        const err = error as AxiosError;

        if (err.response) {
          console.error("API„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ:", err.response);
        } else if (err.request) {
          console.error("„É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:", err.request);
        } else {
          console.error("„Åù„ÅÆ‰ªñ„ÅÆ„Ç®„É©„Éº:", err instanceof Error ? err.message : err);
        }

        alert("„É≠„Ç∞„Ç§„É≥ÊàêÂäüÔºÅ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ");
        router.push("/mypage");
      }
    } catch (error: unknown) {
      // „É≠„Ç∞„Ç§„É≥Ëá™‰Ωì„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà
      console.error("„É≠„Ç∞„Ç§„É≥„Ç®„É©„ÉºË©≥Á¥∞:", error);

      let errorMessage = "„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
      const err = error as AxiosError;

      if (err.response) {
        console.error("API„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ:", err.response);
        if (err.response.status === 401) {
          errorMessage = "„É¶„Éº„Ç∂„ÉºÂêç„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ";
        } else if (err.response.status === 400) {
          errorMessage = "„É™„ÇØ„Ç®„Çπ„Éà„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ";
        } else if (err.response.status === 500) {
          errorMessage = "„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ";
        } else {
          errorMessage = `„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü (${err.response.status})`;
        }
      } else if (err.request) {
        console.error("„É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:", err.request);
        errorMessage = "„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      } else {
        errorMessage = err instanceof Error ? err.message : "‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ";
      }

      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleLogin();
    }
  };

  return (
    <main className="p-4 max-w-sm mx-auto">
      <h1 className="text-xl font-bold mb-4">„É≠„Ç∞„Ç§„É≥</h1>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="space-y-4">
        <div>
          <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
            „É¶„Éº„Ç∂„ÉºÂêç
          </label>
          <input
            id="username"
            type="text"
            placeholder="„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂÖ•Âäõ"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            onKeyPress={handleKeyPress}
            className="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled={loading}
          />
        </div>

        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
            „Éë„Çπ„ÉØ„Éº„Éâ
          </label>
          <input
            id="password"
            type="password"
            placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            onKeyPress={handleKeyPress}
            className="border border-gray-300 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled={loading}
          />
        </div>

        <button
          onClick={handleLogin}
          disabled={loading}
          className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {loading ? "„É≠„Ç∞„Ç§„É≥‰∏≠..." : "„É≠„Ç∞„Ç§„É≥"}
        </button>
      </div>

      <div className="mt-4 text-center">
        <p className="text-sm text-gray-600">
          „Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Å™„ÅÑÊñπ„ÅØ
          <button
            onClick={() => router.push("/register")}
            className="text-blue-600 hover:underline ml-1"
          >
            Êñ∞Ë¶èÁôªÈå≤
          </button>
        </p>
      </div>
    </main>
  );
}
