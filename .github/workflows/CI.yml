name: CI

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  backend:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgis/postgis:16-3.4
        ports: ["5432:5432"]
        env:
          POSTGRES_DB: ${{ vars.DB_NAME }}
          POSTGRES_USER: ${{ vars.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U ${{ vars.DB_USER }} -d ${{ vars.DB_NAME }}"
          --health-interval=10s --health-timeout=5s --health-retries=12

    env:
      CI: "true"
      DJANGO_SETTINGS_MODULE: shrine_project.settings
      USE_GIS: "1"
      TESTING: "1"
      AUTO_GEOCODE_ON_SAVE: "0"
      DB_HOST: "127.0.0.1"
      DB_PORT: "5432"
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      GOOGLE_MAPS_API_KEY: dummy
      PYTHONDONTWRITEBYTECODE: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install GDAL/GEOS system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev libgeos-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Wait for DB (defensive)
        run: |
          for i in {1..30}; do
            pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" && break
            echo "‚è≥ waiting for Postgres... ($i/30)"
            sleep 2
            done
            pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"

      - name: Debug Django settings
        run: |
          python - <<'PY'
          import os, django, importlib
          os.environ.setdefault("DJANGO_SETTINGS_MODULE", "shrine_project.settings")
          print("DJANGO_SETTINGS_MODULE (env):", os.environ.get("DJANGO_SETTINGS_MODULE"))
          django.setup()
          from django.conf import settings
          print("settings.SETTINGS_MODULE:", settings.SETTINGS_MODULE)
          mod = importlib.import_module(settings.SETTINGS_MODULE)
          print("settings file:", getattr(mod, "__file__", "<unknown>"))
          print("Has TEMPLATES:", bool(getattr(settings, "TEMPLATES", None)))
          print("First BACKEND:", getattr(settings, "TEMPLATES", [{}])[0].get("BACKEND"))
          print("Has MIDDLEWARE:", bool(getattr(settings, "MIDDLEWARE", None)))
          print("Middleware head:", (settings.MIDDLEWARE or [])[:6])
          print("INSTALLED_APPS head:", settings.INSTALLED_APPS[:8])
          PY

      - name: Migrate
        run: python manage.py migrate --noinput

      - name: Collect static
        run: python manage.py collectstatic --noinput

      - name: Test
        run: pytest -q -p no:flake8
