name: Backend Tests (minimal)

on:
  pull_request:
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"
  push:
    branches: ["develop", "main", "feature/**", "ci/**"]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_DB: jinja_db
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U admin -d jinja_db"
          --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install system deps (GDAL/GEOS/PROJ + psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev libgeos-dev proj-bin postgresql-client

      - name: Locate GDAL/GEOS shared libraries
        run: |
          set -e
          GDAL=$(python -c "import glob; p=sorted(glob.glob('/usr/lib/*/libgdal.so.*')+glob.glob('/usr/lib/libgdal.so.*')); print(p[-1] if p else '')")
          GEOS=$(python -c "import glob; p=sorted(glob.glob('/usr/lib/*/libgeos_c.so.*')+glob.glob('/usr/lib/libgeos_c.so.*')); print(p[-1] if p else '')")
          if [ -z "$GDAL" ] || [ -z "$GEOS" ]; then
            echo "GDAL=$GDAL GEOS=$GEOS"
            exit 1
          fi
          echo "GDAL_LIBRARY_PATH=$GDAL" >> "$GITHUB_ENV"
          echo "GEOS_LIBRARY_PATH=$GEOS" >> "$GITHUB_ENV"
          echo "GDAL_LIBRARY_PATH=$GDAL"
          echo "GEOS_LIBRARY_PATH=$GEOS"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi

      - name: Lint (black --check & ruff)
        working-directory: backend
        run: |
          black --check .
          ruff check .

      - name: Export env for app/tests
        run: |
          echo "DB_NAME=jinja_db" >> $GITHUB_ENV
          echo "DB_USER=admin" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "POSTGRES_DB=jinja_db" >> $GITHUB_ENV
          echo "POSTGRES_USER=admin" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "REDIS_URL=redis://127.0.0.1:6379/0" >> $GITHUB_ENV
          echo "USE_GIS=1" >> $GITHUB_ENV
          echo "DISABLE_GIS_FOR_TESTS=0" >> $GITHUB_ENV
          echo "AUTO_GEOCODE_ON_SAVE=0" >> $GITHUB_ENV
          echo "GEOCODER_PROVIDER=google" >> $GITHUB_ENV
          echo "GOOGLE_MAPS_API_KEY=test-key" >> $GITHUB_ENV
          echo "PRINT_EFFECTIVE_SETTINGS=1" >> $GITHUB_ENV
          echo "DATABASE_URL=" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=ci-secret-key" >> $GITHUB_ENV

      - name: Wait for DB & enable PostGIS
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}
        run: |
          for i in `seq 1 30`; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && break
            echo "waiting for postgres..."; sleep 1
          done
          psql -h 127.0.0.1 -U "$DB_USER" -d "$DB_NAME" -c "CREATE EXTENSION IF NOT EXISTS postgis;"

      - name: Show key envs (sanity check)
        run: |
          echo "CI=$CI"
          echo "USE_GIS=$USE_GIS DISABLE_GIS_FOR_TESTS=$DISABLE_GIS_FOR_TESTS"
          echo "DB: $DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"
          echo "GDAL_LIBRARY_PATH=$GDAL_LIBRARY_PATH"
          echo "GEOS_LIBRARY_PATH=$GEOS_LIBRARY_PATH"

      - name: Print effective settings (import-time)
        working-directory: backend
        env:
          PRINT_EFFECTIVE_SETTINGS: "1"
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("DJANGO_SETTINGS_MODULE","shrine_project.settings")
          import django
          django.setup()
          from django.conf import settings as s
          print("ENGINE:", s.DATABASES["default"]["ENGINE"])
          print("has_gis_app:", "django.contrib.gis" in s.INSTALLED_APPS)
          PY

      - name: Migrate
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: Pytest (quiet)
        working-directory: backend
        env:
          USE_GIS: "1"
          DISABLE_GIS_FOR_TESTS: "0"
        run: pytest -q --maxfail=1 --disable-warnings

      - name: Run mypy (allowlist)
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: shrine_project.settings
        run: |
          mypy --config-file mypy.ini \
            temples/services/google_places.py \
            temples/permissions.py
