name: Backend Tests (Docker Compose)

on:
  pull_request:
    paths:
      - "backend/**"
      - "infra/**"
      - ".github/workflows/backend-tests-compose.yml"
  push:
    branches:
      - "ci/**"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # CI 専用の .env を生成（必要最小限）
      - name: Create .env.ci
        run: |
          mkdir -p infra
          cat > infra/.env.ci <<'EOF'
          # --- DB ---
          POSTGRES_DB=app
          POSTGRES_USER=app
          POSTGRES_PASSWORD=app
          # --- Django ---
          DJANGO_SETTINGS_MODULE=shrine_project.settings
          # DATABASE_URL は compose のサービス名(db)を使う
          DATABASE_URL=postgresql://app:app@db:5432/app
          PYTHONDONTWRITEBYTECODE=1
          PYTHONUNBUFFERED=1
          EOF

      # 依存サービスを含むコンテナ群を起動
      - name: docker compose up (build & start)
        run: |
          docker compose -f infra/docker-compose.yml --env-file infra/.env.ci up -d --build
          docker compose -f infra/docker-compose.yml ps

      # DB が立ち上がるまで待機（ヘルスチェック or pg_isready）
      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if docker compose -f infra/docker-compose.yml exec -T db pg_isready -U app -h localhost; then
              echo "Postgres is ready"; break
            fi
            echo "Waiting for Postgres ($i/30)..."; sleep 2
          done

      # 依存パッケージに pytest が含まれていない場合の保険
      - name: Ensure pytest exists (inside web)
        run: |
          docker compose -f infra/docker-compose.yml exec -T web sh -lc "python -m pip install -q --upgrade pip && (pytest --version || pip install -q pytest pytest-django)"

      # マイグレーション（必要なら）
      - name: Django migrate (optional but recommended)
        run: |
          docker compose -f infra/docker-compose.yml exec -T web python manage.py migrate --noinput

      # テスト実行
      - name: Run pytest in web container
        run: |
          docker compose -f infra/docker-compose.yml exec -T web pytest -q --maxfail=1 --disable-warnings

      # 失敗してもログを採取して後片付け
      - name: Collect logs
        if: always()
        run: |
          mkdir -p artifacts
          docker compose -f infra/docker-compose.yml logs --no-color web > artifacts/web.log || true
          docker compose -f infra/docker-compose.yml logs --no-color db  > artifacts/db.log  || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: artifacts

      - name: Teardown
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v
