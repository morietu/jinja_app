name: Backend Tests (Docker Compose)

on:
  pull_request:
    paths:
      - "backend/**"
      - "docker-compose.yml"
      - ".github/workflows/backend-tests-compose.yml"
  push:
    branches:
      - "ci/**"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # リポジトリ直下に CI 用の .env.ci を生成
      - name: Create .env.ci
        run: |
          cat > .env.ci <<'EOF'
          # --- Postgres (db サービス用) ---
          POSTGRES_DB=jinja_db
          POSTGRES_USER=admin
          POSTGRES_PASSWORD=admin_pass
          POSTGRES_PORT=5432

          # --- Django (web サービス用) ---
          DJANGO_DB_NAME=jinja_db
          DJANGO_DB_USER=admin
          DJANGO_DB_PASSWORD=admin_pass
          DJANGO_DB_HOST=db
          DJANGO_DB_PORT=5432

          # 任意: Django settings
          DJANGO_SETTINGS_MODULE=shrine_project.settings
          PYTHONDONTWRITEBYTECODE=1
          PYTHONUNBUFFERED=1
          EOF

      # db と web だけ起動（pgadmin / frontend は CI では不要）
      - name: docker compose up (build & start)
        run: |
          docker compose -f docker-compose.yml --env-file .env.ci up -d --build db web
          docker compose -f docker-compose.yml ps

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if docker compose -f docker-compose.yml exec -T db pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-jinja_db} -h localhost; then
              echo "Postgres is ready"; break
            fi
            echo "Waiting for Postgres ($i/30)..."; sleep 2
          done

      - name: Ensure pytest exists (inside web)
        run: |
          docker compose -f docker-compose.yml exec -T web sh -lc "python -m pip install -q --upgrade pip && (pytest --version || pip install -q pytest pytest-django)"

      - name: Django migrate
        run: |
          docker compose -f docker-compose.yml exec -T web python manage.py migrate --noinput

      - name: Run pytest in web container
        run: |
          docker compose -f docker-compose.yml exec -T web pytest -q --maxfail=1 --disable-warnings

      - name: Collect logs
        if: always()
        run: |
          mkdir -p artifacts
          docker compose -f docker-compose.yml logs --no-color web > artifacts/web.log || true
          docker compose -f docker-compose.yml logs --no-color db  > artifacts/db.log  || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: artifacts

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml down -v
