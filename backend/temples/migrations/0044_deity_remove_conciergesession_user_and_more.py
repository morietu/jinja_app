# Generated by Django 5.2.5 on 2025-10-11 07:18

import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("temples", "0043_conciergemessage_conciergesession_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Deity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("kana", models.CharField(blank=True, default="", max_length=128)),
                ("aliases", models.CharField(blank=True, default="", max_length=256)),
                ("wiki_url", models.URLField(blank=True, default="")),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.RemoveField(
            model_name="conciergesession",
            name="user",
        ),
        migrations.RenameField(
            model_name="conciergehistory",
            old_name="query",
            new_name="reason",
        ),
        migrations.RemoveField(
            model_name="conciergehistory",
            name="meta",
        ),
        migrations.RemoveField(
            model_name="conciergehistory",
            name="response",
        ),
        migrations.AddField(
            model_name="conciergehistory",
            name="tags",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AlterField(
            model_name="conciergehistory",
            name="created_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.CreateModel(
            name="GoriyakuTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("ご利益", "願望・テーマ別"),
                            ("神格", "祭神の種類"),
                            ("地域", "地域や役割"),
                        ],
                        default="ご利益",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "ordering": ["category", "name"],
                "indexes": [
                    models.Index(fields=["category", "name"], name="temples_gor_categor_761fec_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="Goshuin",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=100)),
                ("is_public", models.BooleanField(default=True)),
                ("likes", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GoshuinImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("image", models.ImageField(upload_to="goshuin/")),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "goshuin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="temples.goshuin",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "id"],
            },
        ),
        migrations.CreateModel(
            name="PlaceRef",
            fields=[
                ("place_id", models.CharField(max_length=128, primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, default="", max_length=255)),
                ("address", models.CharField(blank=True, default="", max_length=255)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("snapshot_json", models.JSONField(blank=True, null=True)),
                ("synced_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "place_ref",
                "indexes": [
                    models.Index(fields=["name"], name="place_ref_name_63fd60_idx"),
                    models.Index(fields=["synced_at"], name="place_ref_synced__310299_idx"),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["snapshot_json"], name="placeref_snapshot_gin"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Shrine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[("shrine", "神社"), ("temple", "寺院")],
                        db_index=True,
                        default="shrine",
                        max_length=10,
                    ),
                ),
                ("name_jp", models.CharField(max_length=100)),
                ("name_romaji", models.CharField(blank=True, max_length=100, null=True)),
                ("address", models.CharField(max_length=255)),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90.0),
                            django.core.validators.MaxValueValidator(90.0),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180.0),
                            django.core.validators.MaxValueValidator(180.0),
                        ],
                    ),
                ),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "goriyaku",
                    models.TextField(
                        blank=True, default="", help_text="ご利益（自由メモ）", null=True
                    ),
                ),
                ("sajin", models.TextField(blank=True, default="", help_text="祭神", null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "element",
                    models.CharField(
                        blank=True, help_text="五行属性: 木火土金水", max_length=10, null=True
                    ),
                ),
                (
                    "kyusei",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("一白水星", "一白水星"),
                            ("二黒土星", "二黒土星"),
                            ("三碧木星", "三碧木星"),
                            ("四緑木星", "四緑木星"),
                            ("五黄土星", "五黄土星"),
                            ("六白金星", "六白金星"),
                            ("七赤金星", "七赤金星"),
                            ("八白土星", "八白土星"),
                            ("九紫火星", "九紫火星"),
                        ],
                        help_text="九星（例: 九紫火星）",
                        max_length=8,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("views_30d", models.PositiveIntegerField(default=0)),
                ("favorites_30d", models.PositiveIntegerField(default=0)),
                ("popular_score", models.FloatField(default=0.0)),
                ("last_popular_calc_at", models.DateTimeField(blank=True, null=True)),
                (
                    "deities",
                    models.ManyToManyField(blank=True, related_name="shrines", to="temples.deity"),
                ),
                (
                    "goriyaku_tags",
                    models.ManyToManyField(
                        blank=True, related_name="shrines", to="temples.goriyakutag"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="RankingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.localdate)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                (
                    "shrine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ranking_logs",
                        to="temples.shrine",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "shrine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="temples.shrine",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="goshuin",
            name="shrine",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="goshuins",
                to="temples.shrine",
            ),
        ),
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "place_id",
                    models.CharField(blank=True, db_index=True, max_length=128, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_shrines",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shrine",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="temples.shrine",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.AddField(
            model_name="conciergehistory",
            name="shrine",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="recommended_histories",
                to="temples.shrine",
            ),
        ),
        migrations.CreateModel(
            name="Visit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("visited_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("note", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("added", "Added"), ("removed", "Removed")],
                        default="added",
                        max_length=10,
                    ),
                ),
                (
                    "shrine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visits",
                        to="temples.shrine",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visits",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-visited_at"],
            },
        ),
        migrations.DeleteModel(
            name="ConciergeMessage",
        ),
        migrations.DeleteModel(
            name="ConciergeSession",
        ),
        migrations.AddIndex(
            model_name="goshuinimage",
            index=models.Index(fields=["order"], name="temples_gos_order_27aae0_idx"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["name_jp"], name="temples_shr_name_jp_2d623e_idx"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["updated_at"], name="temples_shr_updated_7a628a_idx"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["popular_score"], name="shrine_popular_idx"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["latitude"], name="idx_shrine_lat"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["longitude"], name="idx_shrine_lng"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["latitude", "longitude"], name="idx_shrine_lat_lng"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["kyusei"], name="idx_shrine_kyusei"),
        ),
        migrations.AddIndex(
            model_name="shrine",
            index=models.Index(fields=["kind"], name="idx_shrine_kind"),
        ),
        migrations.AddConstraint(
            model_name="shrine",
            constraint=models.CheckConstraint(
                condition=models.Q(("latitude__gte", -90.0), ("latitude__lte", 90.0)),
                name="chk_lat_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="shrine",
            constraint=models.CheckConstraint(
                condition=models.Q(("longitude__gte", -180.0), ("longitude__lte", 180.0)),
                name="chk_lng_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="shrine",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("latitude__isnull", True), ("longitude__isnull", True)),
                    models.Q(("latitude__isnull", False), ("longitude__isnull", False)),
                    _connector="OR",
                ),
                name="chk_lat_lng_both_or_none",
            ),
        ),
        migrations.AddConstraint(
            model_name="shrine",
            constraint=models.UniqueConstraint(
                condition=models.Q(("location__isnull", False)),
                fields=("name_jp", "address", "location"),
                name="uq_shrine_name_loc",
            ),
        ),
        migrations.AddConstraint(
            model_name="shrine",
            constraint=models.UniqueConstraint(
                condition=models.Q(("location__isnull", True)),
                fields=("name_jp", "address"),
                name="uq_shrine_name_addr_when_loc_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="rankinglog",
            constraint=models.UniqueConstraint(
                fields=("shrine", "date"), name="uq_rankinglog_shrine_date"
            ),
        ),
        migrations.AddConstraint(
            model_name="like",
            constraint=models.UniqueConstraint(
                fields=("shrine", "user"), name="uq_like_shrine_user"
            ),
        ),
        migrations.AddIndex(
            model_name="favorite",
            index=models.Index(fields=["user", "created_at"], name="idx_fav_user_created"),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("shrine__isnull", False), ("place_id__isnull", True)),
                    models.Q(("shrine__isnull", True), ("place_id__isnull", False)),
                    _connector="OR",
                ),
                name="favorite_exactly_one_target",
            ),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.UniqueConstraint(
                condition=models.Q(("shrine__isnull", False)),
                fields=("user", "shrine"),
                name="uq_favorite_user_shrine",
            ),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.UniqueConstraint(
                condition=models.Q(("place_id__isnull", False)),
                fields=("user", "place_id"),
                name="uq_favorite_user_place",
            ),
        ),
    ]
