# Generated by Django 5.2.5 on 2025-09-24 21:48
from django.db import migrations


def _create_pg_indexes(apps, schema_editor):
    if schema_editor.connection.vendor != "postgresql":
        return
    with schema_editor.connection.cursor() as cur:
        # PlaceRef.snapshot_json GIN
        cur.execute(
            """
            CREATE INDEX IF NOT EXISTS placeref_snapshot_gin
            ON place_ref USING GIN (snapshot_json);
        """
        )
        # Shrine.location GiST
        cur.execute(
            """
            CREATE INDEX IF NOT EXISTS shrine_location_gist
            ON temples_shrine USING GIST (location);
        """
        )


def _drop_pg_indexes(apps, schema_editor):
    if schema_editor.connection.vendor != "postgresql":
        return
    with schema_editor.connection.cursor() as cur:
        cur.execute("DROP INDEX IF EXISTS placeref_snapshot_gin;")
        cur.execute("DROP INDEX IF EXISTS shrine_location_gist;")


class Migration(migrations.Migration):
    # CONCURRENTLY を使わないので atomic=True のままでOK
    dependencies = [
        ("temples", "0026_add_shrine_location"),
    ]
    operations = [
        migrations.RunPython(_create_pg_indexes, reverse_code=_drop_pg_indexes),
    ]
