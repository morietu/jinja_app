# backend/temples/migrations/0031_shrine_location_placeref_placeref_snapshot_gin_and_more.py

# Generated by Django 5.2.5 on 2025-09-25 01:54

import django.contrib.gis.db.models.fields  # noqa: F401 (kept for migration import stability)
import django.contrib.postgres.indexes  # noqa: F401
from django.db import migrations


def apply_0031(apps, schema_editor):
    connection = schema_editor.connection
    PlaceRef = apps.get_model("temples", "PlaceRef")
    Shrine = apps.get_model("temples", "Shrine")
    table_shrine = Shrine._meta.db_table
    table_placeref = PlaceRef._meta.db_table

    # ※ location 追加は過去に作られている想定。どうしても残すなら idempotent に。
    try:
        with connection.cursor() as cursor:
            existing_cols = [
                c.name for c in connection.introspection.get_table_description(cursor, table_shrine)
            ]
    except Exception:
        existing_cols = []

    if "location" not in existing_cols:
        # 念のためのフォールバック（副作用ゼロに保つ）
        try:
            from django.contrib.gis.db import models as gis_models

            field = gis_models.PointField(srid=4326, null=True, blank=True)
        except Exception:
            from django.db import models

            field = models.BinaryField(null=True, blank=True)
        try:
            field.set_attributes_from_name("location")
        except Exception:
            pass
        schema_editor.add_field(Shrine, field)

    # ---- Postgres 専用インデックス ----
    if connection.vendor == "postgresql":
        with connection.cursor() as cur:
            # PlaceRef.snapshot_json の GIN だけ作成（存在すればスキップ）
            cur.execute(
                f"CREATE INDEX IF NOT EXISTS placeref_snapshot_gin "
                f"ON {table_placeref} USING GIN (snapshot_json);"
            )

            # location 列の型を確認（geometry のときだけ GIST 作成）
            cur.execute(
                """
                SELECT udt_name
                FROM information_schema.columns
                WHERE table_schema = 'public'
                  AND table_name = %s
                  AND column_name = 'location'
                """,
                [table_shrine.split(".")[-1]],
            )
            row = cur.fetchone()
            udt = (row[0] if row else "").lower()

            if udt == "geometry":
                cur.execute(
                    f"CREATE INDEX IF NOT EXISTS shrine_location_gist "
                    f"ON {table_shrine} USING GIST (location);"
                )
            else:
                # まだ bytea 等なら後続の 0033 で作成されるのでスキップ
                pass


class Migration(migrations.Migration):
    dependencies = [
        ("temples", "0030_add_shrine_location_gist_concurrently"),
    ]
    operations = [
        migrations.RunPython(apply_0031, reverse_code=migrations.RunPython.noop),
    ]
