# Generated by Django 5.2.5 on 2025-09-25 01:54

import django.contrib.gis.db.models.fields
import django.contrib.postgres.indexes
from django.db import migrations


def apply_0031(apps, schema_editor):
    connection = schema_editor.connection
    PlaceRef = apps.get_model("temples", "PlaceRef")
    Shrine = apps.get_model("temples", "Shrine")
    table_shrine = Shrine._meta.db_table
    table_placeref = PlaceRef._meta.db_table

    cursor = connection.cursor()
    try:
        existing_cols = [
            c.name for c in connection.introspection.get_table_description(cursor, table_shrine)
        ]
    except Exception:
        existing_cols = []

    # Add location column only if it does not exist (idempotent)
    if "location" not in existing_cols:
        try:
            from django.contrib.gis.db import models as gis_models

            field = gis_models.PointField(srid=4326, null=True, blank=True)
        except Exception:
            from django.db import models

            field = models.BinaryField(null=True, blank=True)

        try:
            field.set_attributes_from_name("location")
        except Exception:
            pass

        schema_editor.add_field(Shrine, field)

    # Create Postgres-only indexes
    if connection.vendor == "postgresql":
        with connection.cursor() as cur:
            cur.execute(
                "CREATE INDEX IF NOT EXISTS placeref_snapshot_gin ON %s USING GIN (snapshot_json);"
                % table_placeref
            )
            cur.execute(
                "CREATE INDEX IF NOT EXISTS shrine_location_gist ON %s USING GIST (location);"
                % table_shrine
            )


class Migration(migrations.Migration):

    dependencies = [
        ("temples", "0030_add_shrine_location_gist_concurrently"),
    ]

    operations = [
        migrations.RunPython(apply_0031, reverse_code=migrations.RunPython.noop),
    ]
