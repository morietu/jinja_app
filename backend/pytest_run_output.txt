EEEEEEEEEEEEEEEEEEEEEEEssEEEEEEEEEEEEEEEEEE                              [100%]
==================================== ERRORS ====================================
__________________ ERROR at setup of test_post_concierge_plan __________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
____________________ ERROR at setup of test_plan_request_ok ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_______________ ERROR at setup of test_place_lite_location_typed _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_______________ ERROR at setup of test_build_plan_rank_and_mode ________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_________________ ERROR at setup of test_build_plan_no_results _________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
____________________ ERROR at setup of test_shrines_list_ok ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_________________ ERROR at setup of test_goriyaku_tags_list_ok _________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
___________ ERROR at setup of test_concierge_recommendations_relaxed ___________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
___________________ ERROR at setup of test_shorten_examples ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_________ ERROR at setup of test_fill_locations_backfills_and_shortens _________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_ ERROR at setup of test_fill_locations_prefers_candidate_address_without_requests _

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_______________ ERROR at setup of test_api_radius_km_5km_passed ________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_________ ERROR at setup of test_api_accepts_area_string_and_shortens __________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
__________ ERROR at setup of test_api_radius_clip_to_50km_and_passed ___________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____________ ERROR at setup of test_chat_backfills_short_location _____________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______________ ERROR at setup of test_radius_km_bias_passthrough _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
__________ ERROR at setup of test_candidate_formatted_address_is_used __________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______________ ERROR at setup of test_concierge_chat_returns_200 _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_______________ ERROR at setup of test_favorites_crud_happy_path _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_______________ ERROR at setup of test_favorites_are_user_scoped _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
__________________ ERROR at setup of test_post_is_idempotent ___________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____ ERROR at setup of ShrinePermissionTests.test_non_owner_cannot_route ______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
__ ERROR at setup of ShrinePermissionTests.test_non_owner_cannot_view_detail ___

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_________________ ERROR at setup of test_text_search_is_cached _________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
____________________ ERROR at setup of test_photo_is_cached ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
________________ ERROR at setup of test_nearby_search_throttled ________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
___________________ ERROR at setup of test_popular_ordering ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
___________________ ERROR at setup of test_near_filter_bbox ____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______ ERROR at setup of test_recommend_shrines_applies_bonus_and_orders _______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
____________ ERROR at setup of test_recommend_shrines_disable_bonus ____________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____________________ ERROR at setup of test_route_api_ok ______________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
____________ ERROR at setup of test_route_api_requires_destinations ____________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______________ ERROR at setup of test_route_api_max_destinations _______________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______ ERROR at setup of test_route_api_latlng_range_validation[origin0] _______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
______ ERROR at setup of test_route_api_latlng_range_validation[origin1] _______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____ ERROR at setup of test_build_route_returns_legs_and_totals[walking] ______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____ ERROR at setup of test_build_route_returns_legs_and_totals[driving] ______

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
___ ERROR at setup of RouteViewTests.test_requires_login_redirects_to_login ____

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_ ERROR at setup of RouteViewTests.test_route_page_renders_with_script_and_map_div _

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____________________ ERROR at setup of test_resolve_names _____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
_____________________ ERROR at setup of test_reverse_paths _____________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x105ceb0e0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:114: in handle
    executor = MigrationExecutor(connection, self.migration_progress_callback)
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:18: in __init__
    self.loader = MigrationLoader(self.connection)
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:58: in __init__
    self.build_graph()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:229: in build_graph
    self.load_disk()
.venv/lib/python3.13/site-packages/django/db/migrations/loader.py:120: in load_disk
    migration_module = import_module(migration_path)
/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temples/migrations/0025_enable_postgis_and_add_location.py:11: in <module>
    class Migration(migrations.Migration):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    class Migration(migrations.Migration):
        dependencies = [("temples", "0024_alter_favorite_options_and_more")]
        operations = [
            migrations.AddIndex(
                model_name="shrine",
>               index=GiSTIndex(fields=["location"], name="idx_shrine_location_gist"),
            ),
            # ※ もしここに AddField(location) が入っていたら削除。location は別の既存 migration で追加する
        ]
E       NameError: name 'GiSTIndex' is not defined

temples/migrations/0025_enable_postgis_and_add_location.py:16: NameError
=========================== short test summary info ============================
ERROR temples/tests/api/test_concierge_plan_api.py::test_post_concierge_plan
ERROR temples/tests/serializers/test_concierge_serializers.py::test_plan_request_ok
ERROR temples/tests/serializers/test_concierge_serializers.py::test_place_lite_location_typed
ERROR temples/tests/services/test_concierge_service.py::test_build_plan_rank_and_mode
ERROR temples/tests/services/test_concierge_service.py::test_build_plan_no_results
ERROR temples/tests/test_api_basic.py::test_shrines_list_ok - NameError: name...
ERROR temples/tests/test_api_basic.py::test_goriyaku_tags_list_ok - NameError...
ERROR temples/tests/test_api_basic.py::test_concierge_recommendations_relaxed
ERROR temples/tests/test_concierge.py::test_shorten_examples - NameError: nam...
ERROR temples/tests/test_concierge.py::test_fill_locations_backfills_and_shortens
ERROR temples/tests/test_concierge.py::test_fill_locations_prefers_candidate_address_without_requests
ERROR temples/tests/test_concierge.py::test_api_radius_km_5km_passed - NameEr...
ERROR temples/tests/test_concierge.py::test_api_accepts_area_string_and_shortens
ERROR temples/tests/test_concierge.py::test_api_radius_clip_to_50km_and_passed
ERROR temples/tests/test_concierge_api.py::test_chat_backfills_short_location
ERROR temples/tests/test_concierge_api.py::test_radius_km_bias_passthrough - ...
ERROR temples/tests/test_concierge_api.py::test_candidate_formatted_address_is_used
ERROR temples/tests/test_concierge_chat.py::test_concierge_chat_returns_200
ERROR temples/tests/test_favorites_api.py::test_favorites_crud_happy_path - N...
ERROR temples/tests/test_favorites_api.py::test_favorites_are_user_scoped - N...
ERROR temples/tests/test_favorites_api_idempotency.py::test_post_is_idempotent
ERROR temples/tests/test_permissions.py::ShrinePermissionTests::test_non_owner_cannot_route
ERROR temples/tests/test_permissions.py::ShrinePermissionTests::test_non_owner_cannot_view_detail
ERROR temples/tests/test_places_cache_and_throttle.py::test_text_search_is_cached
ERROR temples/tests/test_places_cache_and_throttle.py::test_photo_is_cached
ERROR temples/tests/test_places_cache_and_throttle.py::test_nearby_search_throttled
ERROR temples/tests/test_popular_api.py::test_popular_ordering - NameError: n...
ERROR temples/tests/test_popular_api.py::test_near_filter_bbox - NameError: n...
ERROR temples/tests/test_recommendation_adapter.py::test_recommend_shrines_applies_bonus_and_orders
ERROR temples/tests/test_recommendation_adapter.py::test_recommend_shrines_disable_bonus
ERROR temples/tests/test_route_api.py::test_route_api_ok - NameError: name 'G...
ERROR temples/tests/test_route_api.py::test_route_api_requires_destinations
ERROR temples/tests/test_route_api.py::test_route_api_max_destinations - Name...
ERROR temples/tests/test_route_api.py::test_route_api_latlng_range_validation[origin0]
ERROR temples/tests/test_route_api.py::test_route_api_latlng_range_validation[origin1]
ERROR temples/tests/test_route_service.py::test_build_route_returns_legs_and_totals[walking]
ERROR temples/tests/test_route_service.py::test_build_route_returns_legs_and_totals[driving]
ERROR temples/tests/test_route_view.py::RouteViewTests::test_requires_login_redirects_to_login
ERROR temples/tests/test_route_view.py::RouteViewTests::test_route_page_renders_with_script_and_map_div
ERROR temples/tests/test_urls.py::test_resolve_names - NameError: name 'GiSTI...
ERROR temples/tests/test_urls.py::test_reverse_paths - NameError: name 'GiSTI...
