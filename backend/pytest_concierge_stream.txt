============================= test session starts ==============================
platform darwin -- Python 3.13.7, pytest-8.3.4, pluggy-1.6.0 -- /Users/morietsu/Desktop/jinja_app/backend/.venv/bin/python3.13
cachedir: .pytest_cache
django: version: 5.2.5, settings: shrine_project.settings (from env)
rootdir: /Users/morietsu/Desktop/jinja_app/backend
configfile: pytest.ini
plugins: anyio-4.11.0, Faker-37.8.0, django-4.9.0, requests-mock-1.12.1
collecting ... collected 43 items / 42 deselected / 1 skipped / 1 selected

temples/tests/api/test_concierge_plan_api.py::test_post_concierge_plan ERROR

==================================== ERRORS ====================================
__________________ ERROR at setup of test_post_concierge_plan __________________

request = <SubRequest 'django_db_setup' for <Function test_post_concierge_plan>>
django_test_environment = None
django_db_blocker = <pytest_django.plugin.DjangoDbBlocker object at 0x106ceacf0>
django_db_use_migrations = True, django_db_keepdb = True
django_db_createdb = True, django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -> Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases

        setup_databases_args = {}

        if not django_db_use_migrations:
            _disable_migrations()

        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True

        with django_db_blocker.unblock():
>           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv/lib/python3.13/site-packages/pytest_django/fixtures.py:144:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.13/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.13/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
.venv/lib/python3.13/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
.venv/lib/python3.13/site-packages/django/core/management/base.py:460: in execute
    output = self.handle(*args, **options)
.venv/lib/python3.13/site-packages/django/core/management/base.py:107: in wrapper
    res = handle_func(*args, **kwargs)
.venv/lib/python3.13/site-packages/django/core/management/commands/migrate.py:353: in handle
    post_migrate_state = executor.migrate(
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:135: in migrate
    state = self._migrate_all_forwards(
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:167: in _migrate_all_forwards
    state = self.apply_migration(
.venv/lib/python3.13/site-packages/django/db/migrations/executor.py:255: in apply_migration
    state = migration.apply(state, schema_editor)
.venv/lib/python3.13/site-packages/django/db/migrations/migration.py:132: in apply
    operation.database_forwards(
.venv/lib/python3.13/site-packages/django/db/migrations/operations/special.py:196: in database_forwards
    self.code(from_state.apps, schema_editor)
temples/migrations/0026_add_shrine_location.py:29: in _ensure_location_field
    schema_editor.add_field(Shrine, field)
.venv/lib/python3.13/site-packages/django/contrib/gis/db/backends/spatialite/schema.py:117: in add_field
    self.column_sql(model, field)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor object at 0x12738fe50>
model = <class '__fake__.Shrine'>
field = <django.contrib.gis.db.models.fields.PointField>
include_default = False

    def column_sql(self, model, field, include_default=False):
        from django.contrib.gis.db.models import GeometryField

        if not isinstance(field, GeometryField):
            return super().column_sql(model, field, include_default)

        # Geometry columns are created by the `AddGeometryColumn` function
        self.geometry_sql.append(
            self.sql_add_geometry_column
            % {
                "table": self.geo_quote_name(model._meta.db_table),
>               "column": self.geo_quote_name(field.column),
                "srid": field.srid,
                "geom_type": self.geo_quote_name(field.geom_type),
                "dim": field.dim,
                "null": int(not field.null),
            }
        )
E       AttributeError: 'PointField' object has no attribute 'column'. Did you mean: 'db_column'?

.venv/lib/python3.13/site-packages/django/contrib/gis/db/backends/spatialite/schema.py:50: AttributeError
=========================== short test summary info ============================
ERROR temples/tests/api/test_concierge_plan_api.py::test_post_concierge_plan
================== 1 skipped, 42 deselected, 1 error in 0.81s ==================
