services:
  db:
    image: postgis/postgis:16-3.4
    container_name: shrine_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jinja_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin_pass}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./.docker/db/data:/var/lib/postgresql/data
      - ./.docker/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-jinja_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.web
    container_name: shrine_web
    restart: unless-stopped
    env_file:
      - ${ENV_FILE:-.env.dev}
    environment:
      # ← ここに置く（Django が読む）
      DATABASE_URL: postgres://admin:admin_pass@db:5432/jinja_db

      # 併用するなら DJANGO_DB_* もこのままでOK（settings.py 側の対応次第）
      DJANGO_DB_NAME: ${DJANGO_DB_NAME:-jinja_db}
      DJANGO_DB_USER: ${DJANGO_DB_USER:-admin}
      DJANGO_DB_PASSWORD: ${DJANGO_DB_PASSWORD:-admin_pass}
      DJANGO_DB_HOST: ${DJANGO_DB_HOST:-db}
      DJANGO_DB_PORT: ${DJANGO_DB_PORT:-5432}

      PYTHONUTF8: "1"
      PYTHONIOENCODING: "UTF-8"
      LANG: "C.UTF-8"
      LC_ALL: "C.UTF-8"
      GDAL_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu/libgdal.so
      GEOS_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu/libgeos_c.so
      GDAL_DATA: /usr/share/gdal
      PROJ_LIB: /usr/share/proj
    depends_on:
      db:
        condition: service_healthy   # ← DB の起動完了を待つ
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # フロントがローカルで 3000 を使っているなら、片方を止めるかポート変更
  frontend:
    build:
      context: ./frontend
    container_name: shrine_frontend
    restart: unless-stopped
    ports:
      - "3001:3000"  # ← 競合回避（もしくはサービスごと止める）
    volumes:
      - ./frontend:/app
    depends_on:
      - web



  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data

volumes:
  redis-data:
