version: "3.9"

services:
  db:
    image: postgis/postgis:16-3.4
    container_name: shrine_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jinja_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin_pass}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./.docker/db/data:/var/lib/postgresql/data
      - ./.docker/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-jinja_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.13
    container_name: shrine_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin_pass
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - ./.docker/pgadmin/data:/var/lib/pgadmin

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.web
    container_name: shrine_web
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      PYTHONUTF8: "1"
      PYTHONIOENCODING: "UTF-8"
      LANG: "C.UTF-8"
      LC_ALL: "C.UTF-8"
      # DB（.env.dev に無ければまずは明示）
      DJANGO_DB_NAME: ${DJANGO_DB_NAME:-jinja_db}
      DJANGO_DB_USER: ${DJANGO_DB_USER:-admin}
      DJANGO_DB_PASSWORD: ${DJANGO_DB_PASSWORD:-admin_pass}
      DJANGO_DB_HOST: ${DJANGO_DB_HOST:-db}
      DJANGO_DB_PORT: ${DJANGO_DB_PORT:-5432}
      # GIS ライブラリ（= ここがコロン形式必須）
      GDAL_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu/libgdal.so
      GEOS_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu/libgeos_c.so
      GDAL_DATA: /usr/share/gdal
      PROJ_LIB: /usr/share/proj
    depends_on:
      - db
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: ./frontend
    #  ↑ Dockerfile.frontend を使うなら:
    #  dockerfile: Dockerfile.frontend
    container_name: shrine_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - web

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data

volumes:
  redis-data:
